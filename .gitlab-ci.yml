# This definition builds the container for WebGoat and uses SAST and SAST
# SAST might pass with a failure because of a missing Webwolf part but it can be ignored
# which would make a great use case why allowing failures can make sense
# Two DAST approaches can be applied: AJAX spider or Browser based crawling
# The latter is more efficient when it operates on WebGoat due to the way the WebGoat navigation is set up
# The latter approach requires around 2h which is not unusual for some applications
# AJAX spider only reveals a subset of findings
# In this project the WebGoat container has been used as a service so we can avoid deployment
# It is probably not the most efficient way but pretty good for this demo project.

stages:
  - build
  - test
  - push
  - dast

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/DAST.gitlab-ci.yml

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
  - .m2/repository

variables:
#  CI_DEBUG_TRACE: "true"
  SECURE_LOG_LEVEL: "debug" # pretty helpful when you get errors like exit 1



build:
  stage: build
  image: maven:3-jdk-11-slim
  script:
    - mvn clean install # -DskipTests to shorten tge build
    - mvn package -B -e -DskipTests -Dmaven.repo.local=".m2/repository" # -DskipTests
  artifacts:
    when: always
    expire_in: 2 days
    paths:
      - "webgoat-server/Dockerfile"
      - "webgoat-server/target/"
      - ".m2/"
  

spotbugs-sast:
  dependencies:
    - build
  variables:
    MAVEN_REPO_PATH: ./.m2/repository 
    COMPILE: "false"
  script: echo "In case of error you might want to set SECURE_LOG_LEVEL to a value of debug "
  artifacts:
    reports:
      sast: gl-sast-report.json


push:
  services:
  - name: docker:20.10.6-dind
  image: docker:20.10.6
  variables:
    DOCKER_DRIVER: overlay2 # not sure this is needed
  stage: push
  script:
    - cd webgoat-server
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --build-arg webgoat_version=v8.1.0 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest


dast:
  variables:
    DAST_WEBSITE: http://webgoat:8080/WebGoat/
    DAST_AUTH_URL: http://webgoat:8080/WebGoat/login
    DAST_EXCLUDE_URLS: http://webgoat:8080/WebGoat/logout,http://webgoat:8080/WebGoat/login,http://webgoat:8080/WebGoat/login?logout
    DAST_FULL_SCAN_ENABLED: "true"
    DAST_USERNAME: testtest
    DAST_PASSWORD: password # use protected/masked variables, this is only for demonstration purposes
    DAST_USERNAME_FIELD: username
    DAST_PASSWORD_FIELD: password
    DAST_AUTH_REPORT: "true"
    DAST_AUTH_VERIFICATION_URL: "http://webgoat:8080/WebGoat/start.mvc#lesson/WebGoatIntroduction.lesson"
    # DAST_ZAP_USE_AJAX_SPIDER: "true"
    DOCKER_DRIVER: overlay2
    DAST_BROWSER_SCAN: "true"
    DAST_BROWSER_ACTION_TIMEOUT: "30s"
    DAST_BROWSER_NUMBER_OF_BROWSERS: 3
  before_script:
    - curl -vvv -X POST -d "username=testtest&password=password&matchingPassword=password&agree=agree&submit=Submit" "http://webgoat:8080/WebGoat/register.mvc"   
  script: echo "In case of error you might want to set SECURE_LOG_LEVEL to a value of debug "
  artifacts:
    paths: [gl-dast-debug-auth-report.html]
    when: always
  services:
  - name: $CI_REGISTRY_IMAGE:latest
    alias: webgoat
